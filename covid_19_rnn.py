# -*- coding: utf-8 -*-
"""COVID-19_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGdKiPdUU7Tkbn8yujkHRcPwbJ-4-y4F
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %tensorflow_version 2.x
import tensorflow as tf

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

from google.colab import files
uploaded=files.upload()

import io
import pandas as pd
df=pd.read_csv(io.BytesIO(uploaded['time_series_covid_19_confirmed.csv']))
print(df)

confirmed_data=pd.DataFrame(df.sum(axis=0))
print(confirmed_data)
type(confirmed_data)

train_data=confirmed_data[2:51]
test_data=confirmed_data.tail(10)

import numpy as np
dates=list(confirmed_data.index)
dates=dates[2:]
train_start_date=dates[0]
train_end_date=dates[51]
print("Training starting date : ", train_start_date)
print("Training_end_date : ",train_end_date)
test_start_date=dates[52]
test_end_date=dates[len(dates)-1]
print("Training start date : ",test_start_date)
print("Training end date : ",test_end_date)
day=[]
for i in range(0,51):
  day.append(i+1)
day=np.array(day)
print(day)

import matplotlib.pyplot as plt
plt.plot(range(0,61),confirmed_data[0],label="people afected with corona",c='r')
plt.xlabel('days')
plt.ylabel('No.of people')
plt.legend()

def univariate_data(dataset, start_index, end_index, history_size, target_size):
  data = []
  labels = []

  start_index = start_index + history_size
  if end_index is None:
    end_index = len(dataset) - target_size

  for i in range(start_index, end_index):
    indices = range(i-history_size, i)
    # Reshape data from (history_size,) to (history_size, 1)
    data.append(np.reshape(dataset[indices], (history_size, 1)))
    labels.append(dataset[i+target_size])
  return np.array(data), np.array(labels)

x_train,y_train=univariate_data(confirmed_data[0][2:].values,0,None,40,2)
print('x_train\'s shape',x_train.shape)
print('y_train\'s shape',y_train.shape)

#from sklearn.preprocessing import MinMaxScaler
#scaler=MinMaxScaler()
#for i in range(0,17):
 #   x_train[i]=scaler.fit_transform(x_train[i])
#type(x_train)
#print("train data's shape",x_train.shape)
#y_train_mean=y_train.mean()
#y_train_std=y_train.std()
#y_train=(y_train-y_train_mean)/y_train_std
#y_train=abs(y_tr

def create_time_steps(length):
  return list(range(-length, 0))

def show_plot(plot_data, delta, title):
  labels = ['History', 'True Future', 'Model Prediction']
  marker = ['.-', 'rx', 'go']
  time_steps = create_time_steps(plot_data[0].shape[0])
  if delta:
    future = delta
  else:
    future = 0

  plt.title(title)
  for i, x in enumerate(plot_data):
    if i:
      plt.plot(future, plot_data[i], marker[i], markersize=10,
               label=labels[i])
    else:
      plt.plot(time_steps, plot_data[i].flatten(), marker[i], label=labels[i])
  plt.legend()
  plt.xlim([time_steps[0], (future+5)*2])
  plt.xlabel('Time-Step')
  return plt
show_plot([x_train[0], y_train[0]], 0, 'Sample Example')

print(x_train[0].shape)
y_train.reshape(len(y_train),1)
print(y_train[0])

covid_19_RNN = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(1, input_shape=[40,1]),
    tf.keras.layers.Dense(1)
])

covid_19_RNN.compile(optimizer='adam', loss='mae')

EVALUATION_INTERVAL = 16
EPOCHS = 100

covid_19_RNN.fit(x_train,epochs=100)

