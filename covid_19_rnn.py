# -*- coding: utf-8 -*-
"""COVID-19_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGdKiPdUU7Tkbn8yujkHRcPwbJ-4-y4F
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %tensorflow_version 2.x
import tensorflow as tf

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

from google.colab import files
uploaded=files.upload()

import io
import pandas as pd
df=pd.read_csv(io.BytesIO(uploaded['time_series_covid_19_confirmed.csv']))
print(df)

confirmed_data=pd.DataFrame(df.sum(axis=0))
print(confirmed_data)
type(confirmed_data)

train_data=confirmed_data[2:51]
test_data=confirmed_data.tail(10)

import numpy as np
dates=list(confirmed_data.index)
dates=dates[2:]
train_start_date=dates[0]
train_end_date=dates[55]
print("Training starting date : ", train_start_date)
print("Training_end_date : ",train_end_date)
test_start_date=dates[56]
test_end_date=dates[len(dates)-1]
print("Test start date : ",test_start_date)
print("Test end date : ",test_end_date)
day=[]
for i in range(0,55):
  day.append(i+1)
day=np.array(day)
print(day)

import matplotlib.pyplot as plt
plt.plot(range(0,59),confirmed_data[0][2:],label="people afected with corona",c='r')
plt.xlabel('days')
plt.ylabel('No.of people')
plt.legend()

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
data=confirmed_data[0][2:-5]
data.index
org_dataframe=data
data=scaler.fit_transform(org_dataframe.values.reshape(-1,1))
print(len(data))
time_steps=30
x_data=[]
y_data=[]
for i in range(time_steps,len(data)):
  x_data.append(data[i-time_steps:i])
  y_data.append(data[i])
x_data=np.array(x_data)
print("x_data_shape",x_data.shape)
y_data=np.array(y_data)
print("y_data_shape",y_data.shape)
print(x_data[1][28])
print(y_data[0])

#reshaping the x_data and y_data before feeding it to the RNN
#reshape into the dimsension such as (batch_size,features,1)
#batch size -> No.of rows in yourr data i.e. the no.of sequences 
#features -> No.of independent variables i.e. no. of previous data with which we are predicting the future
x_data=np.reshape(x_data,(x_data.shape[0],x_data.shape[1],1))
print('Reshaped x_data shape' , x_data.shape)
print(x_data.shape[1])

covid_19_RNN=tf.keras.models.Sequential()
#input layer
covid_19_RNN.add(tf.keras.layers.LSTM(units=15,return_sequences=True,input_shape=(x_data.shape[1],1)))
covid_19_RNN.add(tf.keras.layers.Dropout(0.15))
#1st hidden layer
covid_19_RNN.add(tf.keras.layers.LSTM(units=12,return_sequences=True))
covid_19_RNN.add(tf.keras.layers.Dropout(0.13))
#2nd hidden layer
covid_19_RNN.add(tf.keras.layers.LSTM(units=10,return_sequences=True))
covid_19_RNN.add(tf.keras.layers.Dropout(0.1))
#3rd hidden layer
covid_19_RNN.add(tf.keras.layers.LSTM(units=8,return_sequences=True))
covid_19_RNN.add(tf.keras.layers.Dropout(0.09))
#output layer
covid_19_RNN.add(tf.keras.layers.Dense(units=1))
covid_19_RNN.add(tf.keras.layers.Dense(units=1))


#compile the model
covid_19_RNN.compile(optimizer='adam',loss='mae')

#fit the model to your data
covid_19_RNN.fit(x_data,y_data,epochs=600)

#getitng the test data sequence and preprocessing it
test_data=confirmed_data.values
test_data=test_data[(54-30):]
test_data=np.array(test_data).reshape(-1,1)
test_data=scaler.transform(test_data)
x_test=[]
for i in range(time_steps,len(test_data)):
  x_test.append(test_data[i-time_steps:i])

x_test=np.array(x_test)
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
print('xtest',x_test.shape)

#predict using the covid_19_RNN model
predicted_covid_19_spread=covid_19_RNN.predict(x_test)
predict_val=[]
for i in range(0,predicted_covid_19_spread.shape[0]):
  predict_val.append(predicted_covid_19_spread[i].mean())

predict_val=np.array(predict_val).reshape(-1,1)
predict_val=scaler.inverse_transform(predict_val)
print("The predicted perday spread from ",test_start_date,"is")
predict_val